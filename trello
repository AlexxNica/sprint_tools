#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/lib')

require 'config'
require 'trello_helper'
require 'output_helper'
require 'reports'
require 'report'
require 'erb'
require 'pp'
require 'yaml'
require 'i18n'
require 'commander/import'

Encoding.default_external = "UTF-8"

name="#{__FILE__}"

program :name, "Trello Utilities"
program :version, "1.0.0"
program :description, "An assortment of Trello utilities"

# This loads the conf files and creates new objects based on the specified classes
def load_conf(klass,args,single = false)
  if single
    klass.new(args)
  else
    Hash[*args.map do |key,val|
      [key,klass.new(val)]
    end.flatten]
  end
end

$tag_to_label_color = {
  'documentation' => 'green',
  'tc-approved' => 'yellow',
  'no-qe' => 'orange',
  'security' => 'red',
  'devcut' => 'purple'
}

LINKS = {'roadmap_overview' => 'Roadmap',
         'releases_overview' => 'Releases',
         'sprints_overview' => 'Sprints',
         'previous_sprints_overview' => 'Previous Sprints',
         'labels_overview' => 'Labels',
         'sprint_schedule' => 'Sprint Schedule'}

RELEASE_LABEL_REGEX = /^(proposed|targeted|committed)-((\d+)(.(\d+))*)/

trello = load_conf(TrelloHelper, CONFIG.trello, true)

command :list do |c|
  c.syntax = "#{name} list"

  c.option "--list LIST_NAME", "Restrict to a particular list"
  c.option "--team TEAM_NAME (#{trello.teams.keys.join('|')})", "Restrict to a team"
  c.option "--card-ref SCOPE_TEAM_ID", "Get a single card Ex: #{trello.teams.values.first.keys.first}_1"
  c.option "--card-url URL", "Get a single card Ex: https://trello.com/c/6EhPEbM4"

  c.description = "An assortment of Trello queries"
  c.action do |args, options|
    puts "Organization: #{trello.org.name}"
    if options.card_ref
      card = trello.card_by_ref(options.card_ref)
      if card
        trello.print_card(card)
      else
        $stderr.puts "#{options.card_ref} is an invalid format!"
        exit 1
      end
    elsif options.card_url
      card = trello.card_by_url(options.card_url)
      if card
        trello.print_card(card)
      else
        $stderr.puts "#{options.card_url} is an invalid format!"
        exit 1
      end
    else
      if options.team
        boards = trello.team_boards(options.team)
      else
        boards = trello.org_boards
      end

      boards.each do |board|
        puts "\nBoard Name: #{board.name}"
        lists = trello.target(trello.board_lists(board))
        if options.list
          lists = []
          lists.each do |list|
            if list.name == options.list
              lists = [list]
              break
            end
          end
        end
        lists.each do |list|
          trello.print_list(list)
        end
      end
    end
  end
end

command :sprint_identifier do |c|
  c.syntax = "#{name} sprint_identifier"

  c.description = "Print the sprint identifier"
  c.action do |args, options|
    $sprint = Sprint.new({:trello => trello})
    if $sprint.sprint_card.name =~ /^Sprint (\d+)/
      print "#{$1}"
    else
      print "unknown"
    end
  end
end

command :days_left_in_sprint do |c|
  c.syntax = "#{name} days_left_in_sprint"

  c.description = "Print the number of days left in the sprint"
  c.action do |args, options|
    $sprint = Sprint.new({:trello => trello})
    print ($sprint.sprint_card.due.to_time - Time.new).to_i / (60*60*24)
  end
end

command :list_invalid_users do |c|
  c.syntax = "#{name} list_invalid_users"

  c.description = "List the potentially invalid users"
  c.action do |args, options|
    require 'ldap_helper'
    ldap = load_conf(LdapHelper, CONFIG.ldap, true)
    puts "Potential Invalid Organization Users:"
    valid_user_names = {}
    invalid_user_names = ldap.print_invalid_members(trello.org.members, valid_user_names, invalid_user_names)
    puts "\n\nPotential Invalid Board Users:"
    trello.org_boards.each do |board|
      unless board.closed?
        puts "\n#{board.name}:"
        ldap.print_invalid_members(board.members, valid_user_names, invalid_user_names.clone)
      end
    end
    puts "\n\nValid Logins:"
    puts valid_user_names.keys
  end
end


command :generate_trello_login_to_email_json do |c|
  c.syntax = "#{name} generate_trello_login_to_email_json"
  c.option "--out OUT_FILE", "File to output the resulting json to Ex: /tmp/trello_login_to_email.json"

  c.description = "Generate a json file with trello login -> email"
  c.action do |args, options|
    valid_users = {}
    require 'ldap_helper'
    ldap = load_conf(LdapHelper, CONFIG.ldap, true)
    members = trello.org.members
    members.each do |member|
      login = member.username
      name = member.full_name
      begin
        first_name = nil
        last_name = nil
        if name
          names = name.strip.split(' ')
          first_name = I18n.transliterate(names.first)
          if first_name.end_with? '.'
            first_name = first_name[0..-2]
          end
          if names.length > 1
            last_name = I18n.transliterate(names.last)
          end
        end
        if last_name
          users = ldap.ldap_users_by_name(first_name, last_name, true)
          if users.length == 1
            valid_users[login] = users.first['mail'].first
          else
            users = ldap.ldap_users_by_name(first_name, last_name)
            if users.length == 1
              valid_users[login] = users.first['mail'].first
            elsif names.length > 2
              middle_name = I18n.transliterate(names[1])
              users = ldap.ldap_users_by_name(middle_name, last_name)
              if users.length == 1
                valid_users[login] = users.first['mail'].first
              end
            end
            if !valid_users[login]
              users = ldap.ldap_users_by_last_name(last_name)
              if users.length == 1
                valid_users[login] = users.first['mail'].first
              end
            end
          end
          if !valid_users[login]
            puts "Not found or multiple matches: #{login}: #{name}"
          end
        else
          puts "No last name: #{login}: #{name}"
        end
      rescue Exception => e
        puts "    #{login}: #{name} (Exception: #{e.message})"
      end
    end
    if options.out
      File.open(options.out, 'w') {|f| f.write(valid_users.to_json) }
    else
      pp valid_users.to_json
    end
  end
end


command :report do |c|
  c.syntax = "#{name} report"

  c.option "--report-type NAME" , "Available report types: %s" % CONFIG.reports.keys.join(', ')
  c.option "--send-email" , "Send email?"

  c.description = "An assortment of Trello reporting utilities"
  c.action do |args, options|
    options.report_type ||= choose("Report to run?",*CONFIG.reports.keys)
    options.report_type = options.report_type.to_sym
    if options.date
      $date = Date.parse(options.date)
    end

    heading "Generating Status Report" do
      # Read Rally configuration file
      _progress "Logging into Trello" do
        $sprint = Sprint.new({:trello => trello})
      end

      # Generate queries
      _progress "Generating queries" do
        $report_types = load_conf(UserStoryReport,CONFIG.queries)
      end

      # Generate reports
      _progress "Building available reports" do
        $reports = load_conf(Report,CONFIG.reports)
      end
    end

    report = $reports[options.report_type]
    report.options = options.__hash__

    _table(
      "Running Report With Options",
      report.options.marshal_dump,
      { :capitalize => true, :sort => 0, :separator => ':' }
    )

    report.send_email

  end
end

command :generate_roadmap_overview do |c|
  c.syntax = "#{name} generate_roadmap_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/roadmap_overview.html"

  c.description = "Generate the overview of the roadmap board"
  c.action do |args, options|
    options.out ||= '/tmp/roadmap_overview.html'
    erb = ERB.new(File.open('templates/roadmap_overview.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_sprints_overview do |c|
  c.syntax = "#{name} generate_sprints_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/sprints_overview.html"
  c.option "--sprints NUM", "The number of sprints to show"
  c.option "--offset NUM", "The number of sprints to offset from the latest"

  c.description = "Generate the sprints overview"
  c.action do |args, options|
    options.out ||= '/tmp/sprints_overview.html'
    options.sprints = options.sprints ? options.sprints.to_i : 8
    options.offset = options.offset ? options.offset.to_i : 0

    erb = ERB.new(File.open('templates/sprints_overview.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_sprint_schedule do |c|
  c.syntax = "#{name} generate_sprint_schedule"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/sprint_schedule.html"
  c.option "--sprints NUM", "The number of sprints to show"

  c.description = "Generate the sprint schedule"
  c.action do |args, options|
    options.out ||= '/tmp/sprint_schedule.html'
    options.sprints = options.sprints ? options.sprints.to_i : 8

    $sprint = Sprint.new({:trello => trello})

    erb = ERB.new(File.open('templates/sprint_schedule.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_labels_overview do |c|
  c.syntax = "#{name} generate_labels_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/labels_overview.html"

  c.description = "Generate the labels overview"
  c.action do |args, options|
    options.out ||= '/tmp/labels_overview.html'

    $sprint = Sprint.new({:trello => trello})

    erb = ERB.new(File.open('templates/labels_overview.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_releases_overview do |c|
  c.syntax = "#{name} generate_releases_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/releases_overview.html"

  c.description = "Generate the releases overview"
  c.action do |args, options|
    options.out ||= '/tmp/releases_overview.html'

    $sprint = Sprint.new({:trello => trello})

    erb = ERB.new(File.open('templates/releases_overview.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :comment do |c|
  c.syntax = "#{name} comment"

  c.option "--card-ref SCOPE_TEAM_ID", "Card to comment on by ref Ex: #{trello.teams.values.first.keys.first}_1"
  c.option "--card-url URL", "Card to comment on by url Ex: https://trello.com/c/6EhPEbM4"

  c.description = "Adds a comment to a trello card"
  c.action do |args, options|
    comment = args[0]
    card = nil
    if options.card_ref
      card = trello.card_by_ref(options.card_ref)
    elsif  options.card_url
      card = trello.card_by_url(options.card_url)
    end
    if card
      card.add_comment(comment)
    else
      $stderr.puts "#{options.card_ref} is an invalid format!"
      exit 1
    end
  end

end

command :sync_labels do |c|
  c.syntax = "#{name} sync_labels"

  c.description = "Sync the labels from the roadmap board to all the rest"
  c.action do |args, options|
    roadmap_label_colors_by_name = trello.roadmap_label_colors_by_name
    unless roadmap_label_colors_by_name.empty?
      boards = [trello.public_roadmap_board] + trello.boards.values
      boards.each do |board|
        puts "\nBoard Name: #{board.name}"
        board_labels = trello.target(trello.board_labels(board))
        board_labels_by_name = {}
        board_labels.each do |board_label|
          board_labels_by_name[board_label.name] = board_label
        end
        raise "Duplicate labels found" unless board_labels_by_name.length == board_labels.length
        roadmap_label_colors_by_name.each do |label_name, label_color|
          board_label = board_labels_by_name[label_name]
          if !board_label || (label_color != board_label.color)
            if board_label
              puts "Updating label #{label_name} to #{label_color}"
              board_label.color = label_color
              trello.update_label(board_label)
            else
              puts "Setting label #{label_name} to #{label_color}"
              trello.create_label(label_name, label_color, board.id)
            end
          end
        end
        board_labels = trello.target(trello.board_labels(board))
        board_labels.each do |board_label|
          unless roadmap_label_colors_by_name.has_key?(board_label.name) && (roadmap_label_colors_by_name[board_label.name] == board_label.color)
            puts "Deleting label #{board_label.name}"
            board_label.delete
          end
        end
      end
    end
  end
end

command :convert_markers_to_labels do |c|
  c.syntax = "#{name} sync_labels"

  c.description = "Convert [] markers on cards to epic- and future labels that exist"
  c.action do |args, options|
    boards = trello.boards.values
    boards.each do |board|
      puts "\nBoard Name: #{board.name}"
      board_labels = trello.target(trello.board_labels(board))
      board_labels_by_name = {}
      board_labels.each do |board_label|
        board_labels_by_name[board_label.name] = board_label
      end
      lists = trello.target(trello.board_lists(board, :filter => [:all]))
      lists.each do |list|
        cards = trello.list_cards(list)
        unless cards.empty?
          puts "\n  List: #{list.name}  (#cards: #{cards.length})"
          cards.each_with_index do |card, index|
            card_name = card.name
            card_tags = card_name.scan(/\[[^\]]+\]/)
            card_tags.each do |card_tag|
              if card_tag == TrelloHelper::FUTURE_TAG
                epic_label_name = TrelloHelper::FUTURE_LABEL
              else
                epic_label_name = "epic-#{card_tag[1..-2]}"
              end
              if board_labels_by_name.has_key? epic_label_name
                unless trello.card_labels(card).map{|c| c.name }.include?(epic_label_name)
                  epic_label = board_labels_by_name[epic_label_name]
                  puts "Adding #{epic_label.name} to #{card.name} (#{card.url})"
                  card.add_label(epic_label)
                end
                card_name = card_name.sub "#{card_tag} ", ''
                card_name = card_name.sub " #{card_tag}", ''
                card_name = card_name.sub card_tag, ''
                card.name = card_name
                puts "New card name #{card.name}"
                card.save
              end
            end
          end
        end
      end
    end
  end
end

command :update do |c|
  c.syntax = "#{name} update"

  c.option "--add-task-checklists", "Add task checklists to stories"
  c.option "--add-bug-checklists", "Add checklists to stories"
  c.option "--add-doc-tasks", "Add documentation tasks to documentation labeled stories"
  c.option "--add-doc-cards", "Add documentation cards for documentation labeled dev cards"
  c.option "--update-bug-tasks", "Update closed/verified bug tasks"
  c.option "--update-roadmap", "Update the roadmap board with progress from teams.  Note: Existing checklist items will be removed."

  c.description = "An assortment of Trello modification utilities"
  c.action do |args, options|
    doc_descriptions = []
    if options.update_roadmap

      releases = []
      roadmap_label_colors_by_name = trello.roadmap_label_colors_by_name
      roadmap_label_colors_by_name.each_key do |label_name|
        if label_name =~ RELEASE_LABEL_REGEX
          releases << label_name
        end
      end

      tag_to_epics = trello.tag_to_epics
      trello.roadmap_boards.each do |roadmap_board|
        epic_lists = trello.epic_lists(roadmap_board)
        tag_to_epic = {}
        epic_lists.each do |epic_list|
          epic_list.cards.each do |epic_card|
            trello.rename_checklist(epic_card, "Scenarios", TrelloHelper::UNASSIGNED_RELEASE)
            trello.rename_checklist(epic_card, "Future Scenarios", TrelloHelper::FUTURE_RELEASE)
            trello.card_labels(epic_card).each do |label|
              if label.name.start_with? 'epic-'
                tag_to_epic[label.name] = epic_card
              end
            end
            epic_card.name.scan(/\[[^\]]+\]/).each do |tag|
              if tag != TrelloHelper::FUTURE_TAG && !tag_to_epic["epic-#{tag[1..-2]}"]
                tag_to_epic[tag] = epic_card
              end
            end
          end
        end
        puts 'Tags:'
        puts tag_to_epic.keys.pretty_inspect
        epic_stories_by_epic = {}
        (1..2).each do |accepted_pass|
          trello.boards.each do |board_id, board|
            if roadmap_board.prefs['permissionLevel'] == 'org' || roadmap_board.prefs['permissionLevel'] == board.prefs['permissionLevel']
              puts "\nBoard Name: #{board.name}"
              all_lists = trello.target(trello.board_lists(board, :filter => [:all]))
              new_list = nil
              backlog_list = nil
              next_list = nil
              in_progress_list = nil
              complete_list = nil
              accepted_list = nil
              previous_sprint_lists = []
              other_lists = []
              all_lists.each do |l|
                case l.name
                when 'New'
                  new_list = l
                when 'Backlog'
                  backlog_list = l
                when 'Next'
                  next_list = l
                when 'In Progress'
                  in_progress_list = l
                when 'Complete'
                  complete_list = l
                when 'Accepted'
                  accepted_list = l
                when /^Sprint \d+/
                  previous_sprint_lists << l
                else
                  other_lists << l
                end
              end
              i = 0
              lists = []
              [accepted_list, complete_list, in_progress_list, next_list, backlog_list, new_list].each do |l|
                if !l.nil?
                  lists[i] = l
                  i += 1
                end
              end

              previous_sprint_lists = previous_sprint_lists.sort_by { |l| l.name.match('^Sprint (\d+)')[1].to_i }
              lists += previous_sprint_lists
              lists += other_lists
              lists.each do |list|
                accepted = (list.name.match('^Sprint \d+') || list.name == 'Accepted') ? true : false
                next if (accepted && accepted_pass == 1) || (!accepted && accepted_pass == 2)
                cards = trello.list_cards(list)
                if !cards.empty?
                  puts "\n  List: #{list.name}  (#cards: #{cards.length})"
                  cards.each_with_index do |card, index|
                    card_tags = []
                    card_labels = trello.card_labels(card)
                    card_release = nil
                    card_releases = []
                    card_labels.each do |label|
                      if label.name.start_with? 'epic-'
                        card_tags << label.name
                      elsif releases.include?(label.name) && label.name =~ RELEASE_LABEL_REGEX
                        state = $1
                        release = $2
                        major = $3.to_i
                        minor = $5.to_i
                        patch = $7.to_i
                        card_releases << [label, state, release, major, minor, patch]
                      end
                    end

                    unless card_releases.empty?
                      if card_releases.length > 1
                        card_releases.sort_by!{ |release| [release[3], release[4], release[5], TrelloHelper::RELEASE_STATE_ORDER[release[1]]] }
                        first_release = card_releases.first
                        previous_release = first_release[2]
                        lowest_state_order = TrelloHelper::RELEASE_STATE_ORDER[first_release[1]]
                        card_releases[1..-1].each do |release|
                          state_order = TrelloHelper::RELEASE_STATE_ORDER[release[1]]
                          if previous_release == release[2] || lowest_state_order <= state_order
                            label = release[0]
                            puts "Removing lower priority release #{label.name} from #{card.name} (#{card.url})"
                            card.remove_label(label)
                          end
                          lowest_state_order = state_order if state_order < lowest_state_order
                          previous_release = release[2]
                        end
                      end
                      card_release = card_releases.first[0].name
                    end

                    marker_card_tags = card.name.scan(/\[[^\]]+\]/)
                    checklist_name = (marker_card_tags.include?(TrelloHelper::FUTURE_TAG) || card_labels.map{|c| c.name }.include?(TrelloHelper::FUTURE_LABEL)) ? TrelloHelper::FUTURE_RELEASE : TrelloHelper::UNASSIGNED_RELEASE
                    card_tags += marker_card_tags if card_tags.empty?

                    card_tags.each do |card_tag|
                      epic = tag_to_epic[card_tag]
                      if epic
                        if (roadmap_board.prefs['permissionLevel'] == 'org' && tag_to_epics[card_tag].length == 1) || (roadmap_board.prefs['permissionLevel'] == board.prefs['permissionLevel'])
                          epic_stories_by_epic[epic.id] = [] unless epic_stories_by_epic[epic.id]
                          epic_stories_by_epic[epic.id] << [epic, card, list, board, checklist_name, accepted, card_release]
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end

        epic_lists.each do |epic_list|
          epic_list.cards.each do |epic_card|
            unless epic_stories_by_epic[epic_card.id]
              trello.clear_epic_refs(epic_card)
            end
          end
        end
        epic_stories_by_epic.each_value do |epic_stories|
          first_epic_story = epic_stories.first
          if first_epic_story
            trello.clear_epic_refs(first_epic_story[0])
            puts "\nAdding cards to #{first_epic_story[0].name}:"
            epic_stories.each do |epic_story|
              epic = epic_story[0]
              card = epic_story[1]
              list = epic_story[2]
              board = epic_story[3]
              checklist_name = epic_story[4]
              accepted = epic_story[5]
              card_release = epic_story[6]

              if card_release
                 cl = trello.create_checklist(epic, card_release)
                 cl.add_item("[#{card.name}](#{card.url}) (#{list.name}) (#{board.name})", accepted, 'bottom')
              else
                stories_checklist = trello.checklist(epic, checklist_name)
                if stories_checklist
                  puts "Adding #{card.url}"
                  trello.trello_do('checklist') do 
                    stories_checklist.add_item("[#{card.name}](#{card.url}) (#{list.name}) (#{board.name})", accepted, 'bottom')
                  end
                end
              end
            end
          end
        end
        # Delete empty epic checklists
        epic_lists.each do |epic_list|
          epic_list.cards.each do |epic_card|
            trello.delete_empty_epic_checklists(epic_card)
          end
        end
      end
    end
    if options.add_doc_cards
      lists = trello.target(trello.board_lists(trello.documentation_board))
      lists.each do |list|
        cards = trello.list_cards(list)
        if !cards.empty?
          puts "\n  List: #{list.name}  (#cards #{cards.length})"
          cards.each_with_index do |card, index|
            if !(card.name =~ /^Sprint \d+/ && !card.due.nil?)
              doc_descriptions << card.desc if options.add_doc_cards
            end
          end
        end
      end
    end
    if options.add_task_checklists || options.add_bug_checklists || options.update_bug_tasks || options.add_doc_tasks || options.add_doc_cards
      bugzilla = nil
      if options.update_bug_tasks
        require 'bugzilla_helper'
        bugzilla = load_conf(BugzillaHelper, CONFIG.bugzilla, true)
      end
      if options.add_doc_cards && (trello.documentation_board.id != trello.docs_planning_board.id)
        lists = trello.target(trello.board_lists(trello.docs_planning_board))
        lists.each do |list|
          cards = trello.list_cards(list)
          if !cards.empty?
            cards.each_with_index do |card, index|
              doc_descriptions << card.desc
            end
          end
        end
      end
      trello.boards.each do |board_id, board|
        puts "\nBoard Name: #{board.name}"
        lists = trello.target(trello.board_lists(board))
        lists.each do |list|
          if list.name == 'In Progress' || list.name == 'Complete'
            cards = trello.list_cards(list)
            if !cards.empty?
              puts "\n  List: #{list.name}  (#cards #{cards.length})"
              cards.each_with_index do |card, index|
                if options.add_task_checklists || options.add_bug_checklists || options.add_doc_cards
                  if !(card.name =~ /^Sprint \d+/ && !card.due.nil?)
                    labels = trello.card_labels(card)
                    checklists = []
                    checklists << 'Tasks' if options.add_task_checklists
                    checklists << 'Bugs' if options.add_bug_checklists && !labels.map{|c| c.name }.include?('no-qe')

                    if options.add_doc_cards && labels.map{|c| c.name }.include?('documentation') && doc_descriptions.any?
                      found = false
                      doc_descriptions.each do |desc|
                        if desc.include?(card.short_url)
                          found = true
                          break
                        end
                      end
                      unless found
                        name = card.name
                        if card.name =~ /\((\d+|\?)\)(.*)/
                          name = $2.strip
                        end
                        c = Trello::Card.create(:name => "Document: #{name}", :desc => "Corresponding Development Card: #{card.short_url}", :list_id => trello.documentation_next_list.id)
                      end
                    end

                    trello.list_checklists(card).each do |checklist|
                      checklists.delete(checklist.name)
                      break if checklists.empty?
                    end if !checklists.empty?

                    if checklists.any?
                      puts "Adding #{checklists.pretty_inspect.chomp} to #{card.name}"
                      checklists.each do |checklist_name|
                        checklist = Trello::Checklist.create({:name => checklist_name, :board_id => board.id})
                        card.add_checklist(checklist)
                      end
                    end
                  end
                end
                if options.update_bug_tasks
                  ['Bugs', 'Tasks'].each do |cl|
                    bugs_checklist = trello.checklist(card, cl)
                    if bugs_checklist
                      bugs_checklist.items.each do |item|
                        item_name = item.name.strip
                        if item_name =~ /(https?:\/\/bugzilla\.redhat\.com\/[^\?]+\?id=\d+)/
                          bug_url = $1
                          status = bugzilla.bug_status_by_url(bug_url)
                          if status == 'VERIFIED' || status == 'CLOSED'
                            if item.state == 'incomplete'
                              puts "Marking complete: #{item_name}"
                              bugs_checklist.add_item(item_name, true, 'bottom')
                              bugs_checklist.delete_checklist_item(item.id)
                            end
                          elsif status == 'OPEN' || status == 'ASSIGNED'
                            if item.state == 'complete'
                              puts "Marking incomplete: #{item_name}"
                              bugs_checklist.add_item(item_name, false, 'top')
                              bugs_checklist.delete_checklist_item(item.id)
                            end
                          end
                        end
                      end
                    end
                  end
                end
                if options.add_doc_tasks
                  if trello.card_labels(card).map{|label| label.name }.include?("documentation")
                    tasks_checklist = trello.checklist(card, 'Tasks')
                    if tasks_checklist
                      doc_reminder = "Update this card (in the description or in a comment) with details about what needs to be documented.  For subjects that have corresponding engineering owned documentation, a pointer to that documentation should suffice."
                      found = false
                      tasks_checklist.items.each do |item|
                        if item.name.include? doc_reminder
                          found = true
                          break
                        end
                      end
                      unless found
                        puts "Adding documentation reminder: #{card.name}"
                        tasks_checklist.add_item(doc_reminder, false, 'bottom')
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
